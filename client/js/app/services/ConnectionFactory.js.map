{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","dbName","version","stores","close","connection","Error","Promise","resolve","reject","_openConnection","then","createdConnection","bind","catch","erro","openRequest","window","indexedDB","open","onupgradeneeded","console","log","forEach","e","target","result","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement","onsuccess","onerror","error","name"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,YAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;;AAEA,QAAIC,QAAQ,IAAZ;AACA,QAAIC,aAAa,IAAjB;;AAEA;AACI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,0EAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK2B;AAAA;;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIJ,UAAJ,EAAgB;AACZG,gCAAQH,UAAR;AACH,qBAFD,MAEO;AACH,8BAAKK,eAAL,GACKC,IADL,CACU,6BAAqB;AACvBP,oCAAQQ,kBAAkBR,KAAlB,CAAwBS,IAAxB,CAA6BD,iBAA7B,CAAR;AACAA,8CAAkBR,KAAlB,GAA0B,YAAM;AAC5B,sCAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGAD,yCAAaO,iBAAb;AACAJ,oCAAQH,UAAR;AACH,yBARL,EASKS,KATL,CASW,gBAAQ;AACXL,mCAAOM,IAAP;AACH,yBAXL;AAYH;AACJ,iBAjBM,CAAP;AAkBH;AAxBL;AAAA;AAAA,8CA0B6B;AACrB,uBAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIO,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBlB,MAAtB,EAA8BC,OAA9B,CAAlB;;AAEAc,gCAAYI,eAAZ,GAA8B,aAAK;AAC/BC,gCAAQC,GAAR,CAAY,0BAAZ;AACAnB,+BAAOoB,OAAP,CAAe,iBAAS;AACpB,gCAAIC,EAAEC,MAAF,CAASC,MAAT,CAAgBC,gBAAhB,CAAiCC,QAAjC,CAA0CC,KAA1C,CAAJ,EAAsD;AAClDL,kCAAEC,MAAF,CAASC,MAAT,CAAgBI,iBAAhB,CAAkCD,KAAlC;AACH;AACDL,8BAAEC,MAAF,CAASC,MAAT,CAAgBK,iBAAhB,CAAkCF,KAAlC,EAAyC;AACrCG,+CAAe;AADsB,6BAAzC;AAGH,yBAPD;AAQH,qBAVD;;AAYAhB,gCAAYiB,SAAZ,GAAwB,aAAK;AACzBZ,gCAAQC,GAAR,CAAY,gCAAZ;AACAd,gCAAQgB,EAAEC,MAAF,CAASC,MAAjB;AACH,qBAHD;;AAKAV,gCAAYkB,OAAZ,GAAsB,aAAK;AACvBb,gCAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASU,KAArB;AACA1B,+BAAOe,EAAEC,MAAF,CAASU,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAxBM,CAAP;AAyBH;AApDL;AAAA;AAAA,8CAsD6B;AACrB,oBAAI/B,UAAJ,EAAgB;AACZD;AACAC,iCAAa,IAAb;AACH,iBAHD,MAGO;AACH,0BAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACH;AACJ;AA7DL;;AAAA;AAAA;AA+DH,CAvEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n    const dbName = 'aluraframe';\r\n    const version = 5;\r\n    const stores = ['negociacoes'];\r\n\r\n    let close = null;\r\n    let connection = null;\r\n\r\n    return class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error('Não é permitido instanciar ConnectionFactory, utilize de forma estática.')\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                if (connection) {\r\n                    resolve(connection);\r\n                } else {\r\n                    this._openConnection()\r\n                        .then(createdConnection => {\r\n                            close = createdConnection.close.bind(createdConnection);\r\n                            createdConnection.close = () => {\r\n                                throw new Error('Não é possível fechar a conexão diretamente');\r\n                            };\r\n                            connection = createdConnection;\r\n                            resolve(connection);\r\n                        })\r\n                        .catch(erro => {\r\n                            reject(erro);\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n        static _openConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    console.log('Banco criado com sucesso');\r\n                    stores.forEach(store => {\r\n                        if (e.target.result.objectStoreNames.contains(store)) {\r\n                            e.target.result.deleteObjectStore(store);\r\n                        }\r\n                        e.target.result.createObjectStore(store, {\r\n                            autoIncrement: true\r\n                        });\r\n                    });\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    console.log('Conexão recuperada com sucesso');\r\n                    resolve(e.target.result);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n            } else {\r\n                throw new Error('Conexão já fechada');\r\n            }\r\n        }\r\n    }\r\n})();"]}